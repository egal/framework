name: Build release

on:
  create:
    tags:
      - 'v*'

jobs:

  release-package-php-framework:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-python@v1
      - uses: BSFishy/pip-action@v1
        with:
          packages: |
            git-filter-repo
        # p.s. Main info from https://stackoverflow.com/questions/359424/detach-move-subdirectory-into-separate-git-repository
      - name: Split
        run: |
          ls -la
          echo '--- 1 ---'
          git_branch='2.x'
          split_dir=packages/php/framework
          split_remote='https://rollsover:${{ secrets.ACCESS_TOKEN }}@github.com/egal/framework-php-package.git'
          
          git clone https://rollsover:${{ secrets.ACCESS_TOKEN }}@github.com/egal/framework.git ./framework
          cd ./framework
          base_dir=$(pwd)
          
          echo '--- 2 ---'
          split_temp_dir_path='tmp'
          split_int_name=$(echo ${split_dir} | sed -e "s/\//-/g")
          split_only_branch_name=${split_int_name}-only
          split_tmp_dir_path=${split_temp_dir_path}/split-${split_int_name}
          
          echo '--- 3 ---'
          git filter-repo --path ${split_dir}/ --to-subdirectory-filter ${split_dir}/
          ls -la
          exit 1
          
          echo '--- 4 ---'
          git remote set-url origin ${split_remote} || git remote add origin ${split_remote}
          
          echo '--- 5 ---'
          git push --tags --prune -u origin ${git_branch}

  release-package-npm-framework:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - name: Publish
        run: |
          cd ./packages/npm/framework && \
            npm install && \
            npm version ${GITHUB_REF##*/} && \
            tsc index && \
            npm run build && \
            echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > .npmrc && \
            npm publish --access public

  release-package-npm-widget-library:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - name: Publish
        run: |
          cd ./packages/npm/widget-library && \
            npm install && \
            npm version ${GITHUB_REF##*/} && \
            npm run build && \
            echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > .npmrc && \
            npm publish --access public

  release-service-postgres:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Prepare tags for image
        id: image-metadata
        run: |
          REPOSITORY="${{ secrets.DOCKERHUB_USERNAME }}/postgres"
          TAGS="${REPOSITORY}:${GITHUB_REF##*/v}"
          echo "::set-output name=tag::$TAGS"
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: services/postgres/base
          push: true
          tags: ${{ steps.image-metadata.outputs.tag }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: services/postgres/base
          push: true
          tags: ${{ steps.image-metadata.outputs.tag }}-pldbgapi

  release-service-rabbitmq:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Prepare tags for image
        id: image-metadata
        run: echo "::set-output name=tag::${{ secrets.DOCKERHUB_USERNAME }}/rabbitmq:${GITHUB_REF##*/v}"
      - name: Build and push base
        uses: docker/build-push-action@v2
        with:
          context: ./services/rabbitmq/base
          push: true
          tags: ${{ steps.image-metadata.outputs.tag }}
      - name: Build and push management
        uses: docker/build-push-action@v2
        with:
          context: ./services/rabbitmq/management
          push: true
          tags: ${{ steps.image-metadata.outputs.tag }}-management

  release-service-web:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Prepare tags for image
        id: image-metadata
        run: |
          REPOSITORY="${{ secrets.DOCKERHUB_USERNAME }}/web-service"
          TAGS="${REPOSITORY}:${GITHUB_REF##*/v}"
          echo "::set-output name=tags::$TAGS"
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./services/web
          push: true
          tags: ${{ steps.image-metadata.outputs.tags }}
      - name: Build and push
        run: |
          echo "Pushed tags: ${{ steps.image-metadata.outputs.tags }}"

  release-service-auth:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Prepare tags for image
        id: image-metadata
        run: |
          REPOSITORY="${{ secrets.DOCKERHUB_USERNAME }}/auth-service"
          TAGS="${REPOSITORY}:${GITHUB_REF##*/v}"
          echo "::set-output name=tags::$TAGS"
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./services/auth
          push: true
          tags: ${{ steps.image-metadata.outputs.tags }}
      - name: Build and push
        run: |
          echo "Pushed tags: ${{ steps.image-metadata.outputs.tags }}"
