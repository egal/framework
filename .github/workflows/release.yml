name: Build release

on:
  release:
    types:
      - published

jobs:

  package-php-framework:
    runs-on: ubuntu-latest
    steps:
      - run: sudo apt install -y tree
      - uses: actions/setup-python@v1
      - uses: BSFishy/pip-action@v1
        with:
          packages: |
            git-filter-repo
      # p.s. Main info from https://stackoverflow.com/questions/359424/detach-move-subdirectory-into-separate-git-repository
      # TODO: git_branch auto set.
      - name: Split
        run: |
          git_branch='2.x'
          split_dir=packages/php/framework
          split_remote='https://rollsover:${{ secrets.ACCESS_TOKEN }}@github.com/egal/framework-php-package.git'
          git clone https://rollsover:${{ secrets.ACCESS_TOKEN }}@github.com/egal/framework.git .
          git filter-repo --subdirectory-filter ${split_dir}/
          git remote set-url origin ${split_remote} || git remote add origin ${split_remote}
          git push --tags -u origin ${git_branch}

  package-npm-framework:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - name: Publish
        run: |
          cd ./packages/npm/framework && \
            npm install && \
            npm version ${{ github.event.release.tag_name }} && \
            tsc index && \
            npm run build && \
            echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > .npmrc && \
            npm publish --access public

  package-npm-widget-library:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - name: Publish
        run: |
          cd ./packages/npm/widget-library && \
            npm install && \
            npm version ${{ github.event.release.tag_name }} && \
            npm run build && \
            echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > .npmrc && \
            npm publish --access public

  service-postgres:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: docker/setup-qemu-action@v1
      - uses: docker/setup-buildx-action@v1
      - uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - id: image-metadata
        run: |
          REPOSITORY="${{ secrets.DOCKERHUB_USERNAME }}/postgres"
          GIT_TAG=${{ github.event.release.tag_name }}
          TAGS="${REPOSITORY}:${GIT_TAG/v}"
          echo "::set-output name=tag::$TAGS"
      - uses: docker/build-push-action@v2
        with:
          context: services/postgres/base
          push: true
          tags: ${{ steps.image-metadata.outputs.tag }}
      - uses: docker/build-push-action@v2
        with:
          context: services/postgres/base
          push: true
          tags: ${{ steps.image-metadata.outputs.tag }}-pldbgapi

  service-rabbitmq:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: docker/setup-qemu-action@v1
      - uses: docker/setup-buildx-action@v1
      - uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - id: image-metadata
        run: |
          GIT_TAG=${{ github.event.release.tag_name }}
          echo "::set-output name=tag::${{ secrets.DOCKERHUB_USERNAME }}/rabbitmq:${GIT_TAG/v}"
      - uses: docker/build-push-action@v2
        with:
          context: ./services/rabbitmq/base
          push: true
          tags: ${{ steps.image-metadata.outputs.tag }}
      - uses: docker/build-push-action@v2
        with:
          context: ./services/rabbitmq/management
          push: true
          tags: ${{ steps.image-metadata.outputs.tag }}-management

  service-web:
    needs: package-php-framework
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - id: vars
        run: echo ::set-output name=tag::${{ github.event.release.tag_name }}
      - uses: php-actions/composer@v6
        with:
          command: require --ignore-platform-reqs --working-dir ./services/web --no-install egal/framework:${{ steps.vars.outputs.tag }}
      - uses: docker/setup-qemu-action@v1
      - uses: docker/setup-buildx-action@v1
      - uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - id: image-metadata
        run: |
          REPOSITORY="${{ secrets.DOCKERHUB_USERNAME }}/web-service"
          GIT_TAG=${{ github.event.release.tag_name }}
          TAGS="${REPOSITORY}:${GIT_TAG/v}"
          echo "::set-output name=tags::$TAGS"
      - uses: docker/build-push-action@v2
        with:
          context: ./services/web
          push: true
          tags: ${{ steps.image-metadata.outputs.tags }}

  service-auth:
    needs: package-php-framework
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: php-actions/composer@v6
        with:
          command: require --ignore-platform-reqs --working-dir ./services/auth --no-install egal/framework:${{ github.event.release.tag_name }}
      - uses: docker/setup-qemu-action@v1
      - uses: docker/setup-buildx-action@v1
      - uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - id: image-metadata
        run: |
          REPOSITORY="${{ secrets.DOCKERHUB_USERNAME }}/auth-service"
          GIT_TAG=${{ github.event.release.tag_name }}
          TAGS="${REPOSITORY}:${GIT_TAG/v}"
          echo "::set-output name=tags::$TAGS"
      - uses: docker/build-push-action@v2
        with:
          context: ./services/auth
          push: true
          tags: ${{ steps.image-metadata.outputs.tags }}

  notify:
    if: "!github.event.release.prerelease"
    needs:
      - package-php-framework
      - package-npm-framework
      - package-npm-widget-library
      - service-postgres
      - service-rabbitmq
      - service-web
      - service-auth
    runs-on: ubuntu-latest
    steps:
      - uses: egal/release-notify-action@main
        with:
          repository_name: ${{ github.repository }}
          release_json: ${{ toJson(github.event.release) }}
          telegram_channel_id: ${{ secrets.TELEGRAM_CHANNEL_ID_FOR_RELEASE_NOTIFY }}
          telegram_token: ${{ secrets.TELEGRAM_TOKEN }}

# TODO: Restore.
#
#  installer:
#    name: Upload Release Asset
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions/setup-python@v2
#        with:
#          python-version: '3.9'
#      - run: cd tools/installer && pip install -r requirements.txt
#      - run: pyinstaller main.py --onefile
#      - name: Upload Release Asset
#        id: upload-release-asset
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ github.event.release.upload_url }}
#          asset_path: ./tools/installer/dist/main
#          asset_name: egal-installer-${{ github.event.release.tag_name }}
#          asset_content_type: application/octet-stream
