version: '3.8'

volumes:
  certs: { }
  html: { }
  vhost: { }
  dhparam: { }

x-inventory-database-name: &inventory-database-name ${INVENTORY_DATABASE_NAME:-inventory}
x-inventory-database-user: &inventory-database-user ${INVENTORY_DATABASE_USER:-user}
x-inventory-database-password: &inventory-database-password ${INVENTORY_DATABASE_PASSWORD?:err}

x-inventory-environment: &inventory-environment
  APP_NAME: Laravel
  APP_ENV: local
  APP_KEY: base64:24FcS9zwE+hCCEoQnKfY/4386XBn7Tj4r9YI/pS+mc0=
  APP_DEBUG: true
  APP_URL: http://localhost
  LOG_CHANNEL: stack
  LOG_DEPRECATIONS_CHANNEL: null
  LOG_LEVEL: debug
  DB_CONNECTION: pgsql
  DB_HOST: inventory-database
  DB_PORT: 5432
  DB_DATABASE: *inventory-database-name
  DB_USERNAME: *inventory-database-user
  DB_PASSWORD: *inventory-database-password
  BROADCAST_DRIVER: log
  CACHE_DRIVER: file
  FILESYSTEM_DISK: local
  QUEUE_CONNECTION: sync
  SESSION_DRIVER: file
  SESSION_LIFETIME: 120
  MEMCACHED_HOST: 127.0.0.1
  REDIS_HOST: 127.0.0.1
  REDIS_PASSWORD: null
  REDIS_PORT: 6379
  MAIL_MAILER: smtp
  MAIL_HOST: mailhog
  MAIL_PORT: 1025
  MAIL_USERNAME: null
  MAIL_PASSWORD: null
  MAIL_ENCRYPTION: null
  MAIL_FROM_ADDRESS: "hello@example.com"
  MAIL_FROM_NAME: "${APP_NAME}"
  AWS_ACCESS_KEY_ID:
  AWS_SECRET_ACCESS_KEY:
  AWS_DEFAULT_REGION: us-east-1
  AWS_BUCKET:
  AWS_USE_PATH_STYLE_ENDPOINT: false
  PUSHER_APP_ID:
  PUSHER_APP_KEY:
  PUSHER_APP_SECRET:
  PUSHER_HOST:
  PUSHER_PORT: 443
  PUSHER_SCHEME: https
  PUSHER_APP_CLUSTER: mt1
  VITE_PUSHER_APP_KEY: "${PUSHER_APP_KEY}"
  VITE_PUSHER_HOST: "${PUSHER_HOST}"
  VITE_PUSHER_PORT: "${PUSHER_PORT}"
  VITE_PUSHER_SCHEME: "${PUSHER_SCHEME}"
  VITE_PUSHER_APP_CLUSTER: "${PUSHER_APP_CLUSTER}"
  OCTANE_SERVER: swoole
  KEYCLOAK_REALM_PUBLIC_KEY: ${KEYCLOAK_REALM_PUBLIC_KEY?:err}
  KEYCLOAK_ALLOWED_RESOURCES: 'account'

services:

  proxy:
    image: nginxproxy/nginx-proxy:1.0.3
    ports:
      - published: 80
        target: 80
    labels:
      - "com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy"
    environment:
      DHPARAM_GENERATION: "false"
      HTTP_METHOD: redirect
      CONFIG: ""
      HOST_CONFIG: ""
    volumes:
      - html:/usr/share/nginx/html
      - dhparam:/etc/nginx/dhparam
      - vhost:/etc/nginx/vhost.d
      - certs:/etc/nginx/certs:ro
      - /var/run/docker.sock:/tmp/docker.sock:ro
    command:
      - sh
      - -c
      - |
        echo "$${CONFIG}" > "/etc/nginx/proxy.conf" \
          && echo "$${HOST_CONFIG}" > "/etc/nginx/vhost.d/${HOST?:err}" \
          && forego start -r

  client:
    build:
      context: client/web
    environment:
      VIRTUAL_HOST: ${HOST?:err}
      LETSENCRYPT_HOST: ${HOST?:err}
    depends_on:
      keycloak:
        condition: service_started
      inventory-server:
        condition: service_healthy

  keycloak:
    image: quay.io/keycloak/keycloak:20.0.2
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      VIRTUAL_PORT: 8080
      VIRTUAL_HOST: id.${HOST?:err}
      LETSENCRYPT_HOST: id.${HOST?:err}

  inventory-database:
    image: postgres:12.13-alpine
    environment:
      POSTGRES_DB: *inventory-database-name
      POSTGRES_USER: *inventory-database-user
      POSTGRES_PASSWORD: *inventory-database-password
    healthcheck:
      test: pg_isready --username=${INVENTORY_DATABASE_USER:-user} --dbname=${INVENTORY_DATABASE_NAME:-inventory}
      interval: 3s
      timeout: 3s
      retries: 8

  inventory-migration:
    environment:
      <<: *inventory-environment
    build:
      context: server/inventory
      target: cli
    command: php artisan migrate
    depends_on:
      inventory-database:
        condition: service_healthy

  inventory-server:
    environment:
      APP_URL: server.${HOST?:err}
      <<: *inventory-environment
      VIRTUAL_PORT: 8000
      VIRTUAL_HOST: server.${HOST?:err}
      LETSENCRYPT_HOST: server.${HOST?:err}
      VIRTUAL_PATH: /inventory/
      VIRTUAL_DEST: /
    build:
      context: server/inventory
      target: server
    depends_on:
      inventory-database:
        condition: service_healthy
      inventory-migration:
        condition: service_completed_successfully

  inventory-scheduler:
    environment:
      <<: *inventory-environment
    build:
      context: server/inventory
      target: cli
    command: php artisan schedule:work
    depends_on:
      inventory-database:
        condition: service_healthy
      inventory-migration:
        condition: service_completed_successfully

  inventory-movements-handler:
    environment:
      <<: *inventory-environment
    build:
      context: server/inventory
      target: cli
    command: php artisan handle:movements
    depends_on:
      inventory-database:
        condition: service_healthy
      inventory-migration:
        condition: service_completed_successfully
